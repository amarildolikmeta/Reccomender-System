{"version":"NotebookV1","origId":3057526854304816,"name":"test2","language":"python","commands":[{"version":"CommandV1","origId":3057526854304818,"guid":"966b8339-c08b-47c9-819d-832b133e67c0","subtype":"command","commandType":"auto","position":1.0,"command":"train=sqlContext.sql(\"SELECT itemId,count(rating) as numRatings from train group By itemId order By numRatings desc \")","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">AnalysisException</span>: u&quot;missing EOF at &apos;orderBy&apos; near &apos;itemId&apos;; line 1 pos 69&quot;","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">AnalysisException</span>                         Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;ipython-input-2-0fd134c52fbc&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span>train<span class=\"ansiyellow\">=</span>sqlContext<span class=\"ansiyellow\">.</span>sql<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&quot;SELECT itemId,count(rating) as numRatings from train group By itemId orderBy numRatings &quot;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/context.pyc</span> in <span class=\"ansicyan\">sql</span><span class=\"ansiblue\">(self, sqlQuery)</span>\n<span class=\"ansigreen\">    578</span>         <span class=\"ansiyellow\">[</span>Row<span class=\"ansiyellow\">(</span>f1<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">,</span> f2<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">u&apos;row1&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> Row<span class=\"ansiyellow\">(</span>f1<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">2</span><span class=\"ansiyellow\">,</span> f2<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">u&apos;row2&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> Row<span class=\"ansiyellow\">(</span>f1<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">3</span><span class=\"ansiyellow\">,</span> f2<span class=\"ansiyellow\">=</span><span class=\"ansiblue\">u&apos;row3&apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    579</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">--&gt; 580</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> DataFrame<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_ssql_ctx<span class=\"ansiyellow\">.</span>sql<span class=\"ansiyellow\">(</span>sqlQuery<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    581</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    582</span>     <span class=\"ansiyellow\">@</span>since<span class=\"ansiyellow\">(</span><span class=\"ansicyan\">1.0</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">    811</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    812</span>         return_value = get_return_value(\n<span class=\"ansigreen\">--&gt; 813</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">    814</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    815</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.pyc</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     49</span>                                              e.java_exception.getStackTrace()))\n<span class=\"ansigreen\">     50</span>             <span class=\"ansigreen\">if</span> s<span class=\"ansiyellow\">.</span>startswith<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;org.apache.spark.sql.AnalysisException: &apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 51</span><span class=\"ansiyellow\">                 </span><span class=\"ansigreen\">raise</span> AnalysisException<span class=\"ansiyellow\">(</span>s<span class=\"ansiyellow\">.</span>split<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;: &apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">1</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">[</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span> stackTrace<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     52</span>             <span class=\"ansigreen\">if</span> s<span class=\"ansiyellow\">.</span>startswith<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;java.lang.IllegalArgumentException: &apos;</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     53</span>                 <span class=\"ansigreen\">raise</span> IllegalArgumentException<span class=\"ansiyellow\">(</span>s<span class=\"ansiyellow\">.</span>split<span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;: &apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">1</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">[</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span> stackTrace<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">AnalysisException</span>: u&quot;missing EOF at &apos;orderBy&apos; near &apos;itemId&apos;; line 1 pos 69&quot;\n</div>","workflows":[],"startTime":1494536275866,"submitTime":1494536275796,"finishTime":1494536278927,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"5701d465-ab34-46aa-b7c6-7a1c8a236e8f"},{"version":"CommandV1","origId":3057526854304819,"guid":"19c64bb0-f98a-4d9c-8793-c361381759bb","subtype":"command","commandType":"auto","position":2.0,"command":"train.show()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">+------+----------+\n|itemId|numRatings|\n+------+----------+\n| 24639|       134|\n| 31992|       131|\n| 33562|       127|\n| 33173|       125|\n| 28199|       123|\n| 19127|       116|\n| 25694|       115|\n| 22029|       113|\n|  6627|       113|\n| 18200|       113|\n| 17207|       112|\n| 34930|       111|\n| 30453|       108|\n| 19426|       107|\n| 20620|       106|\n|  9420|       106|\n| 15687|       106|\n| 13367|       105|\n|  1289|       103|\n|  5578|       103|\n+------+----------+\nonly showing top 20 rows\n\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1494536279035,"submitTime":1494536275798,"finishTime":1494536293939,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"fa4e3720-130d-4ddc-a0f2-26b0b86a09c4"},{"version":"CommandV1","origId":3057526854304821,"guid":"b7036807-1cb3-412a-8f57-cf1d4e51a3aa","subtype":"command","commandType":"auto","position":3.0,"command":"itemPopularity_sorted=train.rdd\nitemPopularity_sorted=itemPopularity_sorted.map(lambda x :(x[0],int(x[1])))\nitemPopularity_sorted.take(10)","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">4</span><span class=\"ansired\">]: </span>\n[(u&apos;24639&apos;, 134),\n (u&apos;31992&apos;, 131),\n (u&apos;33562&apos;, 127),\n (u&apos;33173&apos;, 125),\n (u&apos;28199&apos;, 123),\n (u&apos;19127&apos;, 116),\n (u&apos;25694&apos;, 115),\n (u&apos;22029&apos;, 113),\n (u&apos;6627&apos;, 113),\n (u&apos;18200&apos;, 113)]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 32.0 failed 1 times, most recent failure: Lost task 0.0 in stage 32.0 (TID 824, localhost): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;ipython-input-10-5e7ac0f2570d&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">      1</span> itemPopularity_sorted<span class=\"ansiyellow\">=</span>train<span class=\"ansiyellow\">.</span>rdd<span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">      2</span> itemPopularity_sorted<span class=\"ansiyellow\">=</span>itemPopularity_sorted<span class=\"ansiyellow\">.</span>map<span class=\"ansiyellow\">(</span><span class=\"ansigreen\">lambda</span> x <span class=\"ansiyellow\">:</span><span class=\"ansiyellow\">(</span>x<span class=\"ansiyellow\">[</span><span class=\"ansicyan\">0</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">,</span>iny<span class=\"ansiyellow\">(</span>x<span class=\"ansiyellow\">[</span><span class=\"ansicyan\">1</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">----&gt; 3</span><span class=\"ansiyellow\"> </span>itemPopularity_sorted<span class=\"ansiyellow\">.</span>take<span class=\"ansiyellow\">(</span><span class=\"ansicyan\">10</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">take</span><span class=\"ansiblue\">(self, num)</span>\n<span class=\"ansigreen\">   1295</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1296</span>             p <span class=\"ansiyellow\">=</span> range<span class=\"ansiyellow\">(</span>partsScanned<span class=\"ansiyellow\">,</span> min<span class=\"ansiyellow\">(</span>partsScanned <span class=\"ansiyellow\">+</span> numPartsToTry<span class=\"ansiyellow\">,</span> totalParts<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">-&gt; 1297</span><span class=\"ansiyellow\">             </span>res <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>context<span class=\"ansiyellow\">.</span>runJob<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">,</span> takeUpToNumLeft<span class=\"ansiyellow\">,</span> p<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1298</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1299</span>             items <span class=\"ansiyellow\">+=</span> res<span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/context.pyc</span> in <span class=\"ansicyan\">runJob</span><span class=\"ansiblue\">(self, rdd, partitionFunc, partitions, allowLocal)</span>\n<span class=\"ansigreen\">    937</span>         <span class=\"ansired\"># SparkContext#runJob.</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    938</span>         mappedRDD <span class=\"ansiyellow\">=</span> rdd<span class=\"ansiyellow\">.</span>mapPartitions<span class=\"ansiyellow\">(</span>partitionFunc<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 939</span><span class=\"ansiyellow\">         </span>port <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_jvm<span class=\"ansiyellow\">.</span>PythonRDD<span class=\"ansiyellow\">.</span>runJob<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_jsc<span class=\"ansiyellow\">.</span>sc<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> mappedRDD<span class=\"ansiyellow\">.</span>_jrdd<span class=\"ansiyellow\">,</span> partitions<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    940</span>         <span class=\"ansigreen\">return</span> list<span class=\"ansiyellow\">(</span>_load_from_socket<span class=\"ansiyellow\">(</span>port<span class=\"ansiyellow\">,</span> mappedRDD<span class=\"ansiyellow\">.</span>_jrdd_deserializer<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    941</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">    811</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    812</span>         return_value = get_return_value(\n<span class=\"ansigreen\">--&gt; 813</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">    814</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    815</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.pyc</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     43</span>     <span class=\"ansigreen\">def</span> deco<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     44</span>         <span class=\"ansigreen\">try</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 45</span><span class=\"ansiyellow\">             </span><span class=\"ansigreen\">return</span> f<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     46</span>         <span class=\"ansigreen\">except</span> py4j<span class=\"ansiyellow\">.</span>protocol<span class=\"ansiyellow\">.</span>Py4JJavaError <span class=\"ansigreen\">as</span> e<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     47</span>             s <span class=\"ansiyellow\">=</span> e<span class=\"ansiyellow\">.</span>java_exception<span class=\"ansiyellow\">.</span>toString<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.9-src.zip/py4j/protocol.py</span> in <span class=\"ansicyan\">get_return_value</span><span class=\"ansiblue\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansigreen\">    306</span>                 raise Py4JJavaError(\n<span class=\"ansigreen\">    307</span>                     <span class=\"ansiblue\">&quot;An error occurred while calling {0}{1}{2}.\\n&quot;</span><span class=\"ansiyellow\">.</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 308</span><span class=\"ansiyellow\">                     format(target_id, &quot;.&quot;, name), value)\n</span><span class=\"ansigreen\">    309</span>             <span class=\"ansigreen\">else</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    310</span>                 raise Py4JError(\n\n<span class=\"ansired\">Py4JJavaError</span>: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.runJob.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 0 in stage 32.0 failed 1 times, most recent failure: Lost task 0.0 in stage 32.0 (TID 824, localhost): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 111, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 106, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 263, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1293, in takeUpToNumLeft\n    yield next(iterator)\n  File &quot;&lt;ipython-input-10-5e7ac0f2570d&gt;&quot;, line 2, in &lt;lambda&gt;\nNameError: global name &apos;iny&apos; is not defined\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:166)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.&lt;init&gt;(PythonRDD.scala:207)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:125)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:70)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:270)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:72)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:96)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:235)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat scala.Option.foreach(Option.scala:236)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1837)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1850)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1863)\n\tat org.apache.spark.api.python.PythonRDD$.runJob(PythonRDD.scala:393)\n\tat org.apache.spark.api.python.PythonRDD.runJob(PythonRDD.scala)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:231)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:381)\n\tat py4j.Gateway.invoke(Gateway.java:259)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:133)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:209)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 111, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 106, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/serializers.py&quot;, line 263, in dump_stream\n    vs = list(itertools.islice(iterator, batch))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1293, in takeUpToNumLeft\n    yield next(iterator)\n  File &quot;&lt;ipython-input-10-5e7ac0f2570d&gt;&quot;, line 2, in &lt;lambda&gt;\nNameError: global name &apos;iny&apos; is not defined\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:166)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.&lt;init&gt;(PythonRDD.scala:207)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:125)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:70)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:270)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:72)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:96)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:235)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\t... 1 more\n\n</div>","workflows":[],"startTime":1494536294028,"submitTime":1494536275803,"finishTime":1494536320063,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"2432bca2-b20f-4359-896e-5e730e15a3ef"},{"version":"CommandV1","origId":3057526854304842,"guid":"1a26dc54-583f-4e04-8d9a-e90890a2e664","subtype":"command","commandType":"auto","position":4.0,"command":"users=sqlContext.sql(\"Select distinct userId from train\").rdd","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1494536676404,"submitTime":1494536676379,"finishTime":1494536677312,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"188a8d0c-7721-4674-a5b3-cf7778ae645e"},{"version":"CommandV1","origId":3057526854304843,"guid":"b6360ac5-1686-4699-86df-c2617be698c3","subtype":"command","commandType":"auto","position":5.0,"command":"users.take(10)\n","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">14</span><span class=\"ansired\">]: </span>\n[Row(userId=u&apos;10810&apos;),\n Row(userId=u&apos;330&apos;),\n Row(userId=u&apos;1917&apos;),\n Row(userId=u&apos;5490&apos;),\n Row(userId=u&apos;8776&apos;),\n Row(userId=u&apos;5814&apos;),\n Row(userId=u&apos;6499&apos;),\n Row(userId=u&apos;1755&apos;),\n Row(userId=u&apos;7272&apos;),\n Row(userId=u&apos;13277&apos;)]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1494536685761,"submitTime":1494536685751,"finishTime":1494536687844,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"aeecd8d6-0eae-45c1-bfab-1c04a628bc2f"},{"version":"CommandV1","origId":3057526854304844,"guid":"17f0bc08-ee5c-4c6d-aca8-46402fdfb857","subtype":"command","commandType":"auto","position":6.0,"command":"testUser=sqlContext.sql(\"Select distinct userId from target\")\nprint(testUser.count())","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">4196\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> invalid syntax","error":"<div class=\"ansiout\"><span class=\"ansicyan\">  File </span><span class=\"ansigreen\">&quot;&lt;ipython-input-14-1d0ad6301939&gt;&quot;</span><span class=\"ansicyan\">, line </span><span class=\"ansigreen\">2</span>\n<span class=\"ansiyellow\">    print(testUser).count())</span>\n<span class=\"ansigrey\">                           ^</span>\n<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> invalid syntax\n\n</div>","workflows":[],"startTime":1494536331620,"submitTime":1494536275816,"finishTime":1494536336550,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"c4aad627-9fa0-44f2-89db-c6d88ffdd210"},{"version":"CommandV1","origId":3328569714747099,"guid":"0fc00a5f-d850-410e-9b2a-f76171c77962","subtype":"command","commandType":"auto","position":9.0,"command":"","commandVersion":0,"state":"finished","results":null,"errorSummary":"<span class=\"ansired\">NameError</span>: name &apos;spark&apos; is not defined","error":null,"workflows":[],"startTime":0,"submitTime":1494536118679,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"aef8420d-74a3-4380-8547-b18d810e2161"},{"version":"CommandV1","origId":3328569714747100,"guid":"37aedf32-9367-4bf4-b0e9-e50cbeedbda3","subtype":"command","commandType":"auto","position":6.625,"command":"print(testUser)","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\">[31, 431, 831, 1431, 2631, 5831, 6031, 6431, 7031, 9631, 9831, 11031, 11431, 11631, 12031, 13031, 14031, 14231, 15031, 32, 632, 2832, 3032, 3832, 4832, 5032, 6032, 6632, 6832, 8032, 9232, 9832, 10232, 11632, 12832, 13432, 33, 433, 833, 1033, 1233, 1433, 1833, 2633, 4233, 6233, 6833, 7433, 8233, 9433, 9833, 10633, 10833, 11033, 12433, 12633, 14833, 234, 834, 3434, 3634, 4234, 4634, 5434, 6234, 6834, 7834, 8434, 8634, 9634, 10234, 10834, 11034, 11434, 13834, 14234, 14634, 15034, 35, 835, 1235, 1635, 2435, 2835, 3435, 4035, 4835, 5235, 5435, 5635, 7435, 8435, 9635, 9835, 10035, 11235, 11435, 11635, 12035, 13635, 13835, 14835, 15035, 1236, 1436, 1636, 2236, 6636, 6836, 7036, 7236, 7836, 8636, 8836, 9236, 9636, 10636, 11236, 11436, 11636, 11836, 12036, 12636, 12836, 13236, 13836, 15036, 37, 1637, 2037, 2837, 3637, 3837, 4037, 5037, 5637, 5837, 6437, 6637, 7837, 8037, 8237, 11037, 12637, 12837, 13037, 14037, 1238, 1438, 1638, 2638, 3438, 4638, 4838, 5038, 8238, 8638, 9638, 9838, 10438, 10638, 10838, 11638, 12038, 12438, 13438, 13838, 14638, 839, 2839, 3439, 4439, 4639, 6039, 7439, 7639, 7839, 8639, 10439, 12239, 12839, 13039, 13439, 13839, 240, 1240, 2040, 3240, 3840, 8040, 8840, 9440, 9640, 10840, 11240, 13040, 13440, 15040, 441, 1641, 2041, 3041, 3841, 4041, 5041, 6241, 6441, 9041, 9441, 9641, 10841, 11441, 11641, 12041, 12641, 13641, 14441, 1642, 2042, 2442, 5242, 6642, 7242, 8042, 9842, 10842, 11042, 11642, 12642, 14442, 14642, 443, 643, 1043, 1643, 2843, 3043, 3243, 5243, 6043, 7043, 7643, 10443, 10843, 11243, 12643, 13043, 14043, 14243, 14443, 14643, 14843, 15243, 1044, 1444, 1644, 2244, 2644, 3244, 3644, 3844, 5644, 6644, 6844, 7444, 7644, 8444, 10244, 11244, 13044, 13644, 14244, 445, 1445, 1645, 1845, 2045, 2645, 2845, 3645, 5245, 6045, 6645, 7445, 8645, 9045, 9245, 10245, 10445, 11045, 12445, 14245, 246, 646, 1046, 3846, 4646, 6046, 6446, 6846, 7246, 8446, 8646, 10046, 10646, 10846, 14846, 15246, 247, 1447, 1647, 2247, 2647, 4447, 5047, 5247, 5447, 6047, 6247, 11047, 11847, 12447, 12847, 1648, 2248, 2448, 2648, 3248, 3848, 4448, 5448, 5648, 5848, 6048, 7648, 8648, 9048, 9448, 11448, 12448, 13048, 14048, 14448, 14648, 15048, 15248, 449, 1249, 1649, 2449, 3249, 5249, 6249, 7049, 9249, 10649, 11449, 11849, 12649, 12849, 13049, 13249, 13449, 13649, 250, 850, 2850, 3050, 3250, 4650, 5050, 5250, 7050, 7450, 7850, 8050, 8450, 8850, 9250, 9850, 10050, 10450, 11850, 12050, 12250, 12450, 12850, 13650, 15250, 51, 651, 2051, 2651, 4851, 5051, 6851, 8051, 8651, 8851, 10251, 10851, 12051, 12651, 13451, 13651, 14851, 15251, 52, 652, 852, 1452, 2052, 2452, 3452, 7452, 8052, 10252, 10452, 10652, 10852, 11452, 12652, 12852, 13252, 13452, 13652, 14252, 14852, 53, 653, 853, 1453, 2053, 3253, 4853, 5053, 5453, 6253, 6653, 7053, 7253, 7853, 8653, 9053, 9253, 11453, 12453, 14253, 14453, 15053, 54, 654, 854, 2054, 2254, 2654, 4254, 4454, 5654, 5854, 6654, 6854, 7454, 7654, 7854, 8254, 9054, 9454, 9854, 10454, 10654, 11854, 12454, 14054, 14654, 14854, 1055, 2455, 2655, 3455, 4455, 5055, 5855, 6455, 7455, 7655, 8055, 8455, 8655, 10455, 11255, 11655, 12855, 13655, 13855, 14055, 14455, 456, 1256, 3056, 3256, 3656, 4456, 4656, 5056, 6256, 8056, 8456, 10056, 10456, 10656, 11656, 12256, 13456, 14856, 257, 857, 1657, 1857, 2257, 3057, 4657, 5857, 6257, 6457, 6657, 7057, 7857, 9057, 10057, 11657, 12057, 12457, 13457, 13657, 14657, 15057, 258, 458, 658, 1658, 1858, 2058, 2658, 4058, 4658, 5058, 5458, 5858, 6858, 7258, 8258, 8458, 9058, 9258, 10858, 11458, 11658, 11858, 12058, 12258, 12458, 12858, 13258, 13458, 13858, 459, 659, 3059, 3459, 5659, 7259, 7659, 8259, 8859, 10259, 10459, 10659, 11659, 11859, 12859, 13459, 14059, 14259, 14859, 15059, 1060, 2060, 2860, 3260, 4260, 4460, 5860, 6060, 6860, 7060, 7260, 9260, 9860, 13460, 61, 1061, 1661, 2061, 2261, 2661, 3461, 3861, 4061, 6461, 7261, 7461, 7661, 7861, 8061, 8461, 8861, 9461, 10861, 12061, 12861, 13261, 14061, 14661, 862, 1862, 2662, 2862, 3662, 4462, 5862, 6462, 8262, 8862, 10062, 10862, 11062, 12662, 12862, 13662, 14462, 463, 663, 1263, 1463, 1663, 2263, 4263, 4863, 7063, 7263, 7863, 8463, 9063, 9263, 10263, 11863, 12063, 12863, 13463, 13863, 14463, 14663, 14863, 64, 1264, 1664, 3064, 3464, 3664, 3864, 4464, 5264, 6264, 9664, 11064, 11264, 12264, 13264, 13464, 14064, 14664, 14864, 15064, 665, 2265, 2865, 3065, 3265, 4865, 5465, 6065, 7665, 10065, 10465, 10665, 10865, 11265, 11665, 12065, 12265, 13065, 13665, 14465, 466, 1866, 2066, 2466, 3066, 3866, 4066, 4866, 5266, 5866, 6666, 6866, 8266, 8666, 9066, 9666, 9866, 10466, 11066, 11466, 12466, 13466, 14866, 867, 1067, 1667, 2467, 2667, 2867, 6067, 6867, 7267, 7667, 8667, 9067, 9267, 10867, 11067, 11867, 13467, 14067, 14267, 268, 1068, 2268, 3468, 3868, 4068, 5468, 8268, 9268, 9868, 10268, 10468, 10868, 11068, 11468, 12068, 12668, 13068, 13268, 13468, 13668, 14668, 69, 269, 869, 2869, 3069, 3469, 3869, 4069, 5269, 6869, 7069, 7869, 8469, 8869, 9069, 9669, 11669, 11869, 12069, 13869, 14869, 15269, 270, 1470, 1670, 2270, 3670, 4070, 4470, 6270, 6870, 8070, 8870, 10270, 11670, 12070, 12270, 12470, 12670, 13670, 14270, 14870, 15270, 3071, 3871, 4871, 5071, 6671, 8071, 8471, 8671, 12471, 13471, 14071, 14471, 2072, 2272, 2472, 3072, 4272, 4472, 5672, 7472, 7672, 8272, 10672, 11072, 12072, 12472, 12872, 14472, 673, 873, 1473, 2073, 2273, 3073, 3273, 3673, 3873, 5673, 6273, 8873, 9273, 9473, 9673, 10873, 11273, 11873, 12273, 13073, 13273, 13473, 13873, 14873, 15273, 274, 874, 1474, 1874, 2274, 2474, 2674, 3074, 3474, 3674, 4074, 4674, 5274, 6274, 6674, 6874, 7074, 7274, 7674, 7874, 8074, 8674, 9474, 9874, 10074, 10474, 10874, 12474, 12674, 13274, 13674, 14874, 675, 1675, 1875, 2675, 2875, 3475, 3675, 3875, 4275, 5075, 5675, 6075, 7475, 8075, 8275, 8475, 8875, 9275, 9475, 9675, 9875, 10675, 13075, 14275, 14475, 15275, 76, 1076, 1476, 1876, 3676, 6076, 6676, 7676, 8076, 8476, 9476, 10276, 10676, 11676, 12276, 13076, 13676, 13876, 14476, 14876, 15076, 15276, 477, 1077, 2877, 3077, 3677, 3877, 4277, 4877, 6277, 6477, 8677, 9277, 11077, 12477, 13277, 14277, 14677, 78, 278, 478, 3678, 3878, 4278, 5078, 5278, 5878, 6078, 6678, 7078, 7878, 9078, 9278, 9478, 11078, 11678, 11878, 12278, 13278, 14078, 14478, 15278, 79, 879, 1279, 1879, 3279, 3679, 4479, 4679, 5079, 6879, 7479, 7879, 9679, 10279, 10679, 11679, 13679, 14479, 14879, 680, 1280, 2080, 2280, 2480, 2680, 2880, 3880, 5080, 5280, 5680, 5880, 6080, 7480, 8280, 9880, 10280, 10880, 13280, 14080, 14280, 14480, 14680, 281, 481, 681, 1481, 1681, 1881, 2081, 3281, 4081, 4881, 5081, 5281, 5681, 6281, 7881, 8481, 9281, 10881, 11081, 11881, 12081, 12281, 13281, 13681, 14681, 1282, 3082, 3482, 4282, 4482, 5282, 6882, 7282, 8082, 8682, 9282, 9882, 10482, 10682, 11482, 12682, 12882, 14682, 15082, 883, 1883, 2883, 4883, 5083, 5483, 7883, 8083, 9683, 10683, 11083, 12883, 13283, 13883, 14283, 14883, 684, 884, 1084, 1484, 1684, 2084, 2884, 4084, 4284, 4484, 5484, 6284, 6484, 6684, 7884, 8684, 9284, 10884, 11884, 12284, 13284, 14884, 85, 1685, 1885, 2285, 3885, 5285, 5885, 7085, 7285, 7885, 8085, 8485, 10685, 12485, 12685, 13285, 14285, 886, 1486, 1686, 2086, 2686, 2886, 3886, 4486, 4886, 5086, 5286, 6286, 7286, 7886, 8086, 8286, 9686, 9886, 10086, 12686, 12886, 13286, 13886, 14486, 487, 1487, 2287, 3287, 3487, 4087, 4687, 4887, 5087, 5487, 6287, 6687, 6887, 8087, 8287, 8487, 8687, 9087, 12487, 12887, 13287, 14687, 288, 488, 888, 1888, 2888, 3488, 3888, 4288, 4488, 4888, 5088, 6088, 6288, 6688, 8088, 8488, 8888, 9488, 9888, 11288, 11888, 12488, 12888, 13488, 14088, 89, 1289, 2489, 3889, 4089, 4889, 5689, 5889, 6289, 6889, 8889, 9289, 9689, 9889, 10289, 11689, 12289, 12689, 13289, 13489, 14289, 15089, 15289, 890, 2090, 2290, 2690, 4090, 4690, 5290, 6890, 7090, 7490, 8090, 9090, 9290, 9690, 10690, 11090, 11890, 13090, 13290, 13490, 13890, 14890, 15090, 491, 691, 1291, 2091, 3091, 3691, 4291, 4691, 5691, 7091, 8891, 9491, 10491, 10691, 12091, 14891, 15091, 92, 1292, 3492, 3692, 3892, 4492, 4892, 5092, 6292, 8292, 9492, 10292, 10892, 12892, 13692, 13892, 14692, 93, 1493, 1693, 3093, 3693, 4893, 5093, 5493, 6493, 6893, 7093, 7293, 9693, 10093, 10293, 12293, 13493, 14293, 14493, 14893, 294, 494, 3294, 4494, 4894, 5294, 6094, 8094, 9094, 9894, 10094, 11094, 11294, 11494, 11894, 13294, 14294, 95, 2095, 2895, 3095, 3695, 4295, 4695, 5495, 6495, 7095, 7695, 8895, 9095, 9495, 9895, 10295, 12295, 12695, 12895, 13295, 13495, 13895, 14495, 296, 696, 1696, 2496, 2696, 3296, 3496, 3696, 5696, 6296, 6496, 7096, 8296, 8496, 8696, 8896, 10096, 10496, 10896, 11496, 12296, 12496, 12696, 14096, 15096, 1097, 1297, 2097, 2697, 3697, 4097, 4897, 5297, 6497, 6897, 7297, 7697, 8097, 8697, 8897, 9497, 10297, 10697, 10897, 11697, 11897, 12697, 13097, 14297, 15297, 1298, 1898, 2298, 3098, 3298, 3698, 4698, 5098, 5498, 6498, 6698, 7098, 7298, 7698, 8898, 9498, 10098, 10898, 12298, 12898, 299, 899, 1699, 1899, 2699, 3699, 3899, 4099, 4699, 5299, 6099, 6699, 7099, 8499, 9299, 9499, 10699, 11299, 11499, 12699, 13899, 14299, 14899, 15299, 100, 700, 900, 1900, 2500, 4300, 4500, 4900, 5700, 5900, 6100, 6700, 7100, 7700, 9100, 11700, 11900, 12900, 14500, 14700, 15100, 301, 1501, 1901, 2701, 3101, 5301, 6501, 6701, 7501, 8301, 9701, 11701, 11901, 12901, 1102, 1502, 2502, 3302, 4302, 5302, 5702, 6102, 6302, 6502, 7302, 8702, 9102, 9702, 10302, 11902, 12102, 12502, 14502, 503, 1503, 2903, 4703, 5503, 5703, 6503, 6703, 7103, 7903, 9303, 9503, 10503, 11103, 11303, 11503, 13303, 14703, 15103, 15303, 104, 504, 2504, 2904, 3104, 3304, 4704, 5304, 5504, 6504, 8104, 8304, 9304, 10504, 10704, 11504, 13104, 13304, 14504, 105, 705, 905, 2305, 3105, 3505, 4505, 6105, 6505, 7905, 8305, 10305, 11105, 11505, 11905, 12705, 13105, 13505, 14105, 706, 1506, 1906, 2106, 2306, 2506, 3106, 3906, 4106, 4306, 5106, 5906, 6106, 6306, 7106, 7906, 8506, 9106, 12106, 907, 1107, 1707, 3107, 3707, 4107, 4907, 5507, 6107, 6707, 6907, 7907, 8707, 8907, 9907, 10307, 11507, 11707, 11907, 12107, 12307, 12707, 14307, 308, 508, 908, 1508, 2108, 2508, 2908, 3108, 3708, 4108, 5108, 5308, 6308, 6708, 7308, 9108, 9708, 10108, 10308, 11308, 11508, 11708, 11908, 12708, 12908, 13308, 13908, 14108, 14708, 14908, 15108, 109, 509, 909, 1509, 2709, 2909, 3309, 4709, 5109, 5709, 6509, 7909, 8109, 8709, 9109, 10109, 10309, 12709, 14309, 14709, 15109, 15309, 110, 310, 510, 710, 1110, 1510, 1910, 3910, 4110, 4510, 4910, 5110, 6710, 6910, 7910, 8110, 9310, 9510, 11510, 12110, 12710, 13110, 13310, 13710, 14910, 111, 511, 1511, 1911, 3511, 6111, 7311, 7711, 7911, 8311, 8711, 9111, 9511, 10111, 10311, 10511, 11111, 11511, 11711, 11911, 12311, 14911, 15111, 112, 312, 712, 1112, 2312, 2512, 2712, 3712, 4112, 5112, 5312, 7512, 7712, 8312, 8512, 8712, 9312, 9512, 9712, 10312, 12312, 12512, 13512, 14312, 15112, 713, 1113, 1713, 2313, 2713, 3113, 3513, 3913, 5113, 5913, 7513, 7913, 8313, 8513, 9513, 10313, 11113, 11313, 11713, 12113, 12513, 12713, 13113, 13513, 14513, 15113, 15313, 314, 1114, 1314, 2914, 5114, 6314, 6914, 7114, 7514, 8314, 9514, 9714, 10114, 10314, 11114, 11914, 12714, 13114, 13514, 15114, 715, 3715, 5315, 7715, 7915, 9515, 10515, 10715, 13515, 14115, 14715, 14915, 15115, 516, 916, 1316, 1516, 2716, 3916, 6316, 6716, 8316, 8516, 8916, 9716, 10516, 12916, 13316, 14116, 14716, 15116, 15316, 717, 1117, 2117, 2917, 3717, 3917, 5517, 6717, 7517, 8517, 8917, 10917, 11517, 12117, 12317, 12917, 13317, 13517, 14317, 14917, 318, 1118, 1918, 2718, 3118, 3518, 4518, 5918, 7318, 7718, 10318, 10518, 11918, 12518, 13918, 14518, 14718, 15118, 919, 1719, 1919, 2119, 2319, 2519, 3319, 3919, 4119, 4519, 4919, 5719, 6119, 6319, 7919, 8519, 8919, 9919, 10119, 10519, 10719, 10919, 12119, 13319, 13519, 13919, 1920, 2320, 2520, 3320, 5120, 5320, 5720, 6120, 6520, 8720, 10120, 11120, 11920, 12720, 13520, 13920, 14720, 15320, 321, 1121, 2121, 2521, 2721, 2921, 3721, 4121, 5921, 7321, 7721, 9121, 9921, 10521, 10721, 10921, 11321, 12321, 13921, 14321, 122, 722, 1122, 1322, 6522, 6922, 7522, 7722, 8122, 9322, 9722, 10522, 10722, 11522, 11922, 12722, 13322, 13922, 14322, 1723, 3123, 3523, 3923, 4523, 7523, 8523, 9523, 9923, 10723, 10923, 12123, 13723, 14123, 14723, 14923, 524, 2124, 2324, 2524, 3324, 4124, 5524, 5724, 6524, 7124, 8124, 8724, 10924, 11124, 11924, 13124, 13924, 14524, 725, 3325, 3525, 5525, 5725, 6325, 7125, 7525, 9125, 10325, 10525, 10925, 11525, 12125, 13125, 13925, 15125, 126, 326, 926, 1726, 2326, 2926, 3326, 4726, 4926, 5126, 5526, 6126, 6326, 8926, 10126, 10326, 10926, 11126, 11326, 11526, 12726, 13326, 14526, 14726, 14926, 15126, 327, 527, 927, 1327, 1527, 1727, 3127, 4127, 4327, 5927, 6527, 7327, 8127, 8927, 10127, 10527, 11127, 11527, 12327, 12527, 14327, 14727, 15127, 1128, 1528, 1728, 2528, 2728, 3328, 3528, 4528, 5528, 6728, 7128, 7328, 8128, 8528, 9928, 10728, 10928, 11528, 11728, 12128, 12728, 12928, 13328, 13928, 14728, 14928, 15328, 729, 929, 2129, 2729, 3929, 4329, 4729, 6129, 6329, 8129, 8329, 8929, 11129, 11329, 11729, 11929, 12129, 12929, 13129, 13529, 14129, 15329, 2130, 2330, 3330, 3730, 4330, 4530, 5330, 5530, 5930, 7330, 7730, 8130, 8530, 10330, 11130, 11330, 12130, 12530, 14530, 14730, 14930, 15130, 15330, 131, 531, 4331, 4731, 5131, 5731, 5931, 6331, 7331, 7531, 8331, 9331, 9731, 10931, 11731, 13131, 14331, 15331, 132, 532, 2132, 3332, 3532, 3932, 4132, 5732, 6732, 6932, 7132, 7332, 8132, 8732, 9332, 9932, 10132, 10932, 11132, 11332, 11932, 12132, 12532, 12932, 13332, 14132, 15332, 333, 733, 1333, 1933, 2133, 2933, 3133, 4933, 5133, 6133, 8733, 9533, 10533, 10733, 11133, 11333, 12333, 14533, 14733, 1334, 1734, 2734, 4134, 5534, 5734, 6334, 7534, 8334, 8534, 8934, 10134, 10734, 11134, 12934, 14534, 15334, 1135, 1335, 1935, 2135, 2935, 5135, 5335, 5535, 6735, 7935, 9935, 10735, 11135, 11735, 12335, 13935, 14535, 136, 336, 1136, 1336, 1936, 2136, 3336, 3936, 4736, 5736, 5936, 6536, 7936, 8936, 9936, 11736, 11936, 12536, 12736, 12936, 13336, 13736, 13936, 14336, 14536, 337, 937, 1137, 2137, 2737, 3137, 6937, 8737, 8937, 9337, 10137, 11137, 11537, 11737, 12337, 14337, 14537, 14737, 14937, 15337, 1538, 1938, 2338, 4338, 5138, 6538, 6738, 8138, 8338, 8538, 8738, 8938, 9138, 10138, 11138, 11538, 12738, 13138, 13338, 14738, 15338, 339, 739, 1739, 4139, 5739, 5939, 6739, 6939, 7139, 8139, 9139, 11539, 11739, 12139, 12739, 14939, 15139, 140, 1740, 1940, 3540, 5140, 6140, 7740, 8140, 8940, 9340, 9740, 10340, 11340, 11740, 12340, 12540, 13740, 13940, 14740, 541, 741, 1941, 2341, 4541, 4741, 5341, 5741, 5941, 6341, 6941, 8141, 8341, 8541, 9541, 9941, 10941, 11541, 13741, 14141, 14541, 542, 942, 4142, 5942, 6342, 6742, 7742, 8742, 9742, 10542, 10742, 11142, 12142, 12542, 12942, 13542, 13942, 14142, 543, 1343, 1943, 2543, 2743, 3543, 3943, 4143, 4543, 5143, 5543, 6143, 7143, 8543, 8743, 8943, 9543, 11543, 12143, 12543, 14143, 14943, 144, 344, 744, 944, 1144, 1944, 4144, 4944, 5344, 5544, 7544, 8144, 8944, 9744, 10544, 10744, 11344, 11544, 12344, 12744, 13144, 13744, 145, 1145, 1345, 1945, 2345, 4145, 4545, 5545, 5745, 7145, 7545, 7745, 8545, 9345, 9545, 10145, 13145, 13545, 14345, 146, 946, 1146, 1346, 2146, 2346, 4946, 5546, 5946, 6146, 6546, 7146, 7546, 10146, 10346, 12146, 12346, 12546, 747, 947, 1547, 1947, 2147, 2347, 2547, 4147, 4947, 5947, 7147, 7547, 7747, 7947, 8347, 9147, 9347, 10547, 10747, 11347, 12747, 13347, 14147, 14947, 1148, 1348, 1948, 3548, 5948, 6148, 6548, 7748, 8348, 8548, 8748, 8948, 9948, 10148, 10548, 10748, 11948, 12348, 12948, 14348, 549, 949, 2149, 2549, 3749, 4149, 4949, 5749, 7749, 8149, 8349, 8549, 10749, 11549, 12349, 12749, 12949, 13549, 14549, 14749, 14949, 15149, 350, 750, 1750, 1950, 3350, 3550, 5550, 5750, 6950, 7350, 8150, 9950, 10550, 10750, 11350, 11750, 12350, 12950, 14750, 14950, 15350, 151, 551, 1151, 1551, 2351, 2551, 2751, 2951, 3351, 4151, 5351, 5951, 6751, 6951, 7951, 8951, 9951, 11751, 12551, 13951, 14151, 14751, 14951, 152, 1152, 1952, 2352, 3552, 4152, 4352, 5552, 6952, 7152, 7352, 7552, 8552, 10752, 11152, 11352, 11552, 12752, 13352, 13752, 14752, 14952, 15352, 353, 3753, 4153, 4553, 4953, 5953, 6553, 7153, 8753, 9553, 10353, 10553, 11353, 11553, 12353, 12553, 14353, 14953, 1954, 3354, 3754, 4354, 4954, 5554, 6354, 7154, 7954, 8754, 8954, 9554, 13754, 14154, 155, 355, 1555, 1955, 2155, 3955, 6155, 6355, 6555, 8155, 9155, 9755, 10755, 11355, 11755, 12555, 12755, 13355, 13555, 14955, 15155, 156, 956, 1356, 1756, 1956, 2156, 4356, 4756, 5556, 5956, 6156, 7356, 7556, 7756, 8756, 9156, 12556, 12956, 13956, 14356, 14556, 14756, 757, 1157, 1757, 1957, 2157, 2357, 2557, 2957, 3157, 5957, 6357, 7157, 7757, 8557, 11757, 11957, 12157, 12357, 12757, 13157, 13357, 13557, 13957, 14757, 958, 3358, 3558, 3758, 4158, 4358, 4758, 5358, 5758, 6358, 6958, 7358, 7558, 7958, 9158, 10958, 12158, 12358, 12958, 14558, 15158, 359, 559, 759, 1159, 5159, 5559, 5959, 6559, 7359, 7759, 8559, 10759, 11359, 11759, 11959, 12359, 12759, 13559, 160, 1560, 1760, 2360, 2560, 3360, 3560, 4360, 4760, 4960, 5160, 7160, 7360, 7760, 8760, 9160, 10560, 11160, 11560, 11760, 12560, 14760, 14960, 15360, 361, 761, 961, 1161, 1361, 1761, 2361, 2561, 3361, 3561, 4761, 6361, 6961, 7161, 7361, 7561, 8161, 9161, 9961, 10761, 11161, 11961, 12161, 12561, 13161, 13961, 14361, 14561, 15161, 162, 2762, 4962, 5562, 6562, 7362, 8562, 9162, 10962, 12362, 12562, 13162, 15162, 1163, 1963, 3163, 3563, 4763, 5563, 5763, 6763, 6963, 7163, 7363, 8363, 9563, 10363, 10763, 11763, 12763, 13163, 13963, 164, 364, 1564, 1764, 1964, 2164, 2564, 2764, 2964, 3364, 3564, 4364, 4764, 6364, 7764, 8164, 8564, 9364, 10364, 10764, 12164, 12764, 13364, 13764, 13964, 14164, 14364, 14564, 15164, 15364, 165, 365, 565, 1165, 1365, 1765, 3165, 3565, 4365, 4565, 5165, 5365, 5565, 6165, 6365, 7965, 8165, 8965, 9365, 10565, 10765, 10965, 11365, 11965, 12365, 13765, 166, 1766, 2366, 3166, 4366, 4566, 5566, 6966, 7166, 7366, 7566, 8766, 8966, 9366, 9766, 10166, 10966, 11166, 11966, 12166, 12966, 14766, 1767, 2167, 2967, 3167, 3767, 4967, 6167, 6367, 6567, 7567, 7767, 8367, 8967, 9167, 10967, 11967, 12567, 12767, 13567, 568, 968, 1768, 2168, 2368, 2968, 3168, 4368, 5168, 5568, 5968, 8368, 9168, 9368, 12968, 13368, 14168, 15168, 169, 569, 969, 2369, 2569, 3969, 4369, 4569, 5569, 6969, 8569, 8769, 9369, 9569, 10169, 11369, 11569, 12369, 12569, 12769, 13569, 13969, 14169, 14769, 2570, 6370, 7170, 7370, 8370, 9170, 9770, 9970, 10570, 10970, 11770, 12570, 12770, 13970, 14370, 14570, 14970, 2571, 3771, 3971, 4371, 5171, 7171, 7571, 8771, 9171, 9771, 10171, 10371, 13371, 14171, 572, 972, 1572, 2772, 3572, 3972, 5772, 6372, 6972, 7172, 7572, 9372, 10772, 10972, 11172, 11972, 13972, 14172, 14372, 173, 773, 1173, 1373, 1773, 3173, 4373, 4573, 4773, 5173, 5373, 5773, 6173, 6573, 7173, 7773, 8573, 9573, 10573, 11373, 12573, 12773, 13173, 13373, 13573, 14773, 14973, 374, 2374, 3374, 3774, 3974, 4774, 5174, 6374, 7174, 7574, 7974, 8174, 8374, 9574, 10974, 11174, 11374, 12174, 12374, 12974, 13374, 13574, 375, 1175, 2775, 3775, 4175, 4575, 5575, 8975, 9375, 10175, 10775, 10975, 12775, 12975, 13975, 14775, 376, 1576, 1976, 2776, 3376, 3776, 4976, 5376, 5576, 6576, 7176, 7576, 7776, 7976, 8376, 9176, 10976, 11976, 12576, 13176, 13376, 13576, 14376, 15176, 777, 977, 1177, 1577, 1977, 3977, 4377, 4777, 4977, 5377, 5577, 5977, 6377, 6777, 7377, 8177, 8377, 10977, 13177, 13377, 14377, 14577, 378, 978, 1178, 1378, 1578, 1978, 2978, 3378, 5778, 5978, 6378, 7578, 8578, 9178, 9578, 10378, 10778, 10978, 11178, 11578, 12778, 12978, 13778, 14978, 179, 379, 979, 1379, 2179, 2379, 3379, 3979, 4379, 4979, 6579, 7179, 7979, 8179, 9979, 10979, 11179, 11379, 11579, 12179, 12379, 12779, 13779, 13979, 14379, 14579, 380, 780, 1180, 3180, 4980, 5580, 7180, 7580, 8180, 8380, 8580, 10380, 10580, 10980, 11980, 12180, 12980, 13580, 14180, 14780, 14980, 15180, 1181, 1981, 2581, 3581, 3781, 3981, 5981, 7381, 7581, 7781, 7981, 11381, 12781, 12981, 13781, 14381, 14781, 582, 782, 982, 1782, 2182, 2582, 2782, 3582, 4582, 5182, 6982, 7182, 7782, 8182, 8582, 9382, 10582, 10982, 11782, 12582, 13182, 13982, 14182, 14582, 383, 983, 3583, 3983, 4983, 5783, 6183, 7983, 9183, 9383, 9783, 10183, 10383, 10983, 11183, 11383, 11783, 11983, 12183, 13783, 13983, 14183, 14583, 15183, 184, 784, 1184, 2784, 3784, 4184, 4784, 5584, 6384, 6784, 7384, 7584, 8784, 10384, 10584, 10784, 12184, 12384, 13184, 13984, 15184, 185, 385, 1785, 1985, 2585, 2785, 2985, 4585, 4785, 5185, 5385, 5585, 5785, 6385, 6585, 6985, 7385, 7585, 8385, 9785, 9985, 11185, 11385, 12985, 14585, 14785, 14985, 186, 1786, 1986, 2186, 4386, 6186, 6386, 6586, 6986, 7586, 8186, 8586, 8786, 9186, 9586, 10386, 10986, 11186, 11986, 12586, 12986, 13786, 14186, 14386, 187, 787, 987, 1387, 1587, 1787, 3387, 3587, 4187, 4587, 4987, 5187, 5587, 5787, 6187, 6987, 7187, 7587, 7987, 8187, 8787, 9987, 10987, 11187, 11587, 12587, 13187, 13987, 14587, 14787, 14987, 15187, 388, 788, 1588, 1788, 2388, 3188, 4588, 5588, 6188, 6588, 6988, 7588, 9388, 9788, 11588, 12188, 13388, 13788, 13988, 14788, 14988, 189, 589, 789, 1189, 1789, 3189, 3989, 4789, 4989, 6589, 7389, 8589, 9189, 10189, 10589, 10989, 12189, 14789, 190, 390, 590, 990, 1190, 2990, 3190, 3790, 3990, 4190, 4990, 5790, 6590, 7790, 7990, 8190, 9390, 9790, 10190, 10790, 11990, 13190, 13590, 191, 791, 1391, 1991, 2591, 3191, 3591, 5391, 5991, 6191, 6591, 7391, 7791, 8591, 9791, 10391, 11591, 11791, 11991, 12191, 13391, 13591, 14391, 14591, 14991, 592, 792, 1792, 3192, 3392, 3592, 3992, 5192, 5392, 5992, 6992, 7392, 7592, 8392, 8792, 8992, 9192, 9792, 12192, 12592, 12992, 13592, 14592, 14792, 393, 1193, 1993, 2993, 4993, 5393, 5593, 5793, 5993, 6193, 6393, 6593, 7393, 7593, 7793, 8393, 8993, 11793, 14193, 14393, 14993, 15193, 2394, 4194, 4394, 4594, 6194, 7794, 8194, 8394, 8594, 8794, 10794, 10994, 11594, 11994, 13194, 13794, 13994, 14194, 14394, 14794, 15194, 595, 2195, 2595, 2795, 3195, 4195, 4995, 6395, 6795, 7595, 8195, 8595, 8995, 9395, 9595, 9795, 9995, 12595, 12795, 13195, 13595, 14195, 15195, 796, 1796, 2996, 3396, 3596, 4396, 5196, 6196, 6596, 7396, 7796, 8396, 9396, 9596, 10596, 12396, 12796, 12996, 13796, 14196, 14596, 197, 2397, 2597, 2997, 4197, 5197, 5397, 5597, 5797, 6197, 6397, 6797, 7197, 9597, 9997, 11197, 11597, 12797, 2398, 2998, 3198, 3798, 5598, 6398, 6598, 6798, 7798, 7998, 8198, 8998, 9598, 11398, 11598, 12798, 13598, 14798, 14998, 15198, 399, 599, 1999, 2399, 2599, 4199, 4799, 5199, 6199, 6799, 6999, 7799, 8999, 9399, 10399, 10799, 10999, 11199, 12799, 12999, 14199, 14599, 14999, 600, 1800, 2800, 3800, 4600, 5000, 6000, 8600, 9000, 10600, 10800, 11400, 11600, 12200, 12600, 12800, 13800, 14400, 401, 801, 1201, 2801, 3001, 3201, 3801, 4001, 4601, 4801, 5001, 5401, 5601, 7801, 8001, 8601, 9401, 10001, 10601, 12801, 13001, 13201, 13801, 14601, 14801, 2202, 2602, 3202, 3402, 3602, 4402, 5402, 6002, 6202, 6802, 7202, 7802, 8002, 9802, 10402, 10602, 11002, 11202, 11602, 12602, 13402, 14002, 14602, 603, 1803, 2403, 2603, 3003, 3203, 4203, 6603, 7003, 7203, 8403, 9803, 10003, 11203, 11803, 12403, 13003, 13603, 14803, 15003, 4, 1204, 1804, 2404, 2604, 3604, 4204, 4804, 5204, 5404, 6804, 7004, 7204, 7404, 7604, 7804, 10404, 11404, 12004, 12604, 13004, 13204, 13404, 14204, 5, 205, 405, 605, 1005, 1205, 1405, 1805, 4805, 5005, 5405, 6405, 6605, 7005, 7405, 8205, 8805, 9005, 9805, 10205, 10405, 11005, 11805, 12005, 13005, 13205, 14605, 606, 806, 1406, 1606, 1806, 3206, 6406, 7006, 7606, 8006, 8206, 8406, 8806, 9006, 9406, 9606, 9806, 10406, 12006, 12406, 13406, 14006, 1607, 1807, 2007, 2407, 3407, 3807, 5807, 6007, 6607, 6807, 7807, 9607, 9807, 10207, 10407, 12407, 13607, 14607, 8, 208, 808, 1408, 1808, 2808, 5608, 6608, 6808, 7008, 7808, 9608, 9808, 10408, 11408, 12008, 13208, 14208, 14608, 15008, 9, 209, 2009, 2409, 5009, 5409, 6009, 7809, 8009, 8809, 9409, 10809, 11609, 13009, 13409, 14009, 14209, 14609, 14809, 810, 1010, 2410, 2610, 4010, 5610, 7010, 7810, 9010, 9610, 12210, 12410, 13010, 13410, 14010, 14410, 1011, 2011, 3411, 3611, 4611, 4811, 5211, 5611, 5811, 8611, 10011, 13211, 15011, 412, 1812, 2212, 2812, 3212, 3812, 5012, 5212, 6012, 6212, 6412, 7012, 7412, 8812, 9612, 11012, 11812, 12012, 12212, 12612, 13012, 13212, 14212, 14412, 14612, 15012, 13, 413, 813, 1813, 2013, 2813, 3413, 5013, 5213, 5813, 8613, 9013, 9413, 10013, 10613, 10813, 11213, 12013, 14013, 14613, 14813, 1014, 2414, 3014, 3214, 4214, 5614, 7014, 8014, 8614, 9014, 9214, 9814, 11214, 12414, 12814, 13214, 13814, 14014, 14214, 415, 615, 4015, 4615, 5215, 5415, 5615, 6615, 7015, 7815, 9615, 9815, 10215, 10815, 11215, 13215, 13615, 14815, 15015, 15215, 616, 816, 1016, 1416, 1816, 2816, 3216, 3616, 4616, 4816, 5216, 7816, 9216, 9416, 10216, 10416, 11016, 13216, 14016, 217, 617, 1017, 1417, 1617, 2017, 2617, 3017, 4417, 5217, 5417, 5817, 6817, 7817, 8017, 8417, 8817, 12417, 13217, 13817, 14017, 14617, 15017, 15217, 18, 218, 418, 1218, 1418, 1818, 3218, 3418, 5218, 5618, 6618, 6818, 7018, 7618, 7818, 8618, 9418, 9818, 10418, 10818, 12018, 12818, 13018, 14018, 15218, 19, 3019, 3819, 4019, 4219, 4819, 6019, 6819, 8019, 8419, 8619, 8819, 9219, 10419, 11619, 12219, 12819, 13019, 14219, 14619, 15219, 820, 1420, 1620, 1820, 2020, 3020, 3820, 5820, 7420, 8020, 8620, 9220, 9420, 9620, 10020, 10820, 11820, 12820, 13020, 13420, 13820, 621, 2421, 2621, 3221, 3421, 4821, 5621, 7421, 8021, 8621, 9021, 10221, 10821, 13821, 14621, 14821, 15021, 15221, 222, 1222, 3422, 4222, 5822, 6422, 7022, 7422, 7822, 8622, 8822, 9222, 9822, 10222, 10622, 10822, 11622, 12422, 12622, 14622, 23, 223, 1423, 1823, 2623, 2823, 3023, 6023, 6423, 8023, 9823, 10023, 10423, 10823, 11623, 12423, 12623, 13023, 14223, 1224, 1624, 2624, 3424, 3624, 4824, 5024, 5824, 6224, 8224, 8424, 10024, 10424, 12024, 13624, 13824, 14424, 14624, 15224, 4025, 4625, 7625, 8225, 9225, 9825, 10625, 11425, 11625, 13025, 13425, 13625, 26, 826, 1426, 1626, 2426, 3626, 4226, 5026, 5226, 6026, 6826, 7026, 7426, 8426, 9626, 10226, 12826, 13226, 13426, 15026, 15226, 827, 1627, 1827, 2027, 2227, 3227, 3627, 5827, 6427, 6827, 9027, 9827, 10227, 10827, 11027, 12227, 12827, 14227, 14627, 15027, 828, 1428, 2028, 2428, 3028, 3628, 3828, 4028, 4828, 5028, 5428, 5828, 6228, 6628, 6828, 8228, 8628, 9228, 10228, 11228, 11828, 12628, 13228, 15028, 15228, 29, 1229, 1829, 2629, 2829, 3229, 4829, 5229, 6229, 6429, 6629, 8029, 9029, 11229, 12029, 12229, 12429, 12829, 2830, 3830, 5430, 5630, 6030, 6230, 6630, 7030, 7230, 7630, 7830, 8630, 8830, 10030, 10630, 10830, 11430, 12230, 12630, 12830, 13030, 13230, 15030, 15230]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":null,"error":null,"workflows":[],"startTime":1494536717534,"submitTime":1494536717523,"finishTime":1494536717617,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"353f8b01-6c80-4410-adf3-9109857f854a"},{"version":"CommandV1","origId":4087362244415892,"guid":"f3284a44-d953-4da3-85e7-fd677f5a0cc4","subtype":"command","commandType":"auto","position":7.0,"command":"users=users.filter(lambda x:x  in testUser","commandVersion":0,"state":"error","results":null,"errorSummary":"<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> unexpected EOF while parsing","error":"<div class=\"ansiout\"><span class=\"ansicyan\">  File </span><span class=\"ansigreen\">&quot;&lt;ipython-input-22-8fb86f25ead7&gt;&quot;</span><span class=\"ansicyan\">, line </span><span class=\"ansigreen\">1</span>\n<span class=\"ansiyellow\">    users=users.filter(lambda x:x  in testUser</span>\n<span class=\"ansigrey\">                                              ^</span>\n<span class=\"ansired\">SyntaxError</span><span class=\"ansired\">:</span> unexpected EOF while parsing\n\n</div>","workflows":[],"startTime":1494546246517,"submitTime":1494546246517,"finishTime":1494546246603,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"1f006012-2314-4115-8456-62aa86b596b6"},{"version":"CommandV1","origId":4087362244415893,"guid":"4f9ed394-f71d-44ca-a310-14f2a025612a","subtype":"command","commandType":"auto","position":6.5,"command":"testUser=testUser.rdd.map(lambda x:int(x[0])).collect()\n","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"></div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"<span class=\"ansired\">AttributeError</span>: &apos;DataFrame&apos; object has no attribute &apos;redd&apos;","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">AttributeError</span>                            Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;ipython-input-7-1e2bb9e43782&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span>testUser<span class=\"ansiyellow\">=</span>testUser<span class=\"ansiyellow\">.</span>redd<span class=\"ansiyellow\">.</span>collect<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/dataframe.pyc</span> in <span class=\"ansicyan\">__getattr__</span><span class=\"ansiblue\">(self, name)</span>\n<span class=\"ansigreen\">    840</span>         <span class=\"ansigreen\">if</span> name <span class=\"ansigreen\">not</span> <span class=\"ansigreen\">in</span> self<span class=\"ansiyellow\">.</span>columns<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    841</span>             raise AttributeError(\n<span class=\"ansigreen\">--&gt; 842</span><span class=\"ansiyellow\">                 &quot;&apos;%s&apos; object has no attribute &apos;%s&apos;&quot; % (self.__class__.__name__, name))\n</span><span class=\"ansigreen\">    843</span>         jc <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>_jdf<span class=\"ansiyellow\">.</span>apply<span class=\"ansiyellow\">(</span>name<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    844</span>         <span class=\"ansigreen\">return</span> Column<span class=\"ansiyellow\">(</span>jc<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansired\">AttributeError</span>: &apos;DataFrame&apos; object has no attribute &apos;redd&apos;\n</div>","workflows":[],"startTime":1494536336568,"submitTime":1494536275820,"finishTime":1494536344558,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"367c9864-5a70-4f81-8cc0-90c904ffdad4"},{"version":"CommandV1","origId":4087362244415894,"guid":"71d09c26-f1b7-4115-9d57-80a11b9f8630","subtype":"command","commandType":"auto","position":8.0,"command":"users.count()","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">19</span><span class=\"ansired\">]: </span>4196\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"Command skipped","error":null,"workflows":[],"startTime":1494536833595,"submitTime":1494536833586,"finishTime":1494536841063,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f2c146df-f3d5-48f4-a531-b4cc07e14d5a"},{"version":"CommandV1","origId":4087362244415896,"guid":"65250bef-64e5-4820-8646-6d5d9240cb26","subtype":"command","commandType":"auto","position":6.75,"command":"users = users.map(lambda x:int(x[0]))\nusers.take(10)","commandVersion":0,"state":"finished","results":{"type":"html","data":"<div class=\"ansiout\"><span class=\"ansired\">Out[</span><span class=\"ansired\">17</span><span class=\"ansired\">]: </span>[15374, 15373, 15372, 15371, 15370, 15369, 15368, 15367, 15366, 15365]\n</div>","arguments":{},"addedWidgets":{},"removedWidgets":[],"datasetInfos":[]},"errorSummary":"org.apache.spark.SparkException: Job aborted due to stage failure: Task 4 in stage 17.0 failed 1 times, most recent failure: Lost task 4.0 in stage 17.0 (TID 1218, localhost): org.apache.spark.api.python.PythonException: Traceback (most recent call last):","error":"<div class=\"ansiout\"><span class=\"ansired\">---------------------------------------------------------------------------</span>\n<span class=\"ansired\">Py4JJavaError</span>                             Traceback (most recent call last)\n<span class=\"ansigreen\">&lt;ipython-input-9-d72b09ea76c4&gt;</span> in <span class=\"ansicyan\">&lt;module&gt;</span><span class=\"ansiblue\">()</span>\n<span class=\"ansigreen\">----&gt; 1</span><span class=\"ansiyellow\"> </span>users <span class=\"ansiyellow\">=</span> users<span class=\"ansiyellow\">.</span>sortBy<span class=\"ansiyellow\">(</span><span class=\"ansigreen\">lambda</span> x<span class=\"ansiyellow\">:</span>int<span class=\"ansiyellow\">(</span>x<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span>ascending<span class=\"ansiyellow\">=</span><span class=\"ansicyan\">0</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">sortBy</span><span class=\"ansiblue\">(self, keyfunc, ascending, numPartitions)</span>\n<span class=\"ansigreen\">    657</span>         <span class=\"ansiyellow\">[</span><span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;a&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">1</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;b&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">2</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;1&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">3</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;d&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">4</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">(</span><span class=\"ansiblue\">&apos;2&apos;</span><span class=\"ansiyellow\">,</span> <span class=\"ansicyan\">5</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    658</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">--&gt; 659</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> self<span class=\"ansiyellow\">.</span>keyBy<span class=\"ansiyellow\">(</span>keyfunc<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>sortByKey<span class=\"ansiyellow\">(</span>ascending<span class=\"ansiyellow\">,</span> numPartitions<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>values<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    660</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    661</span>     <span class=\"ansigreen\">def</span> glom<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">sortByKey</span><span class=\"ansiblue\">(self, ascending, numPartitions, keyfunc)</span>\n<span class=\"ansigreen\">    625</span>         <span class=\"ansired\"># the key-space into bins such that the bins have roughly the same</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    626</span>         <span class=\"ansired\"># number of (key, value) pairs falling into them</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 627</span><span class=\"ansiyellow\">         </span>rddSize <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>count<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    628</span>         <span class=\"ansigreen\">if</span> <span class=\"ansigreen\">not</span> rddSize<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    629</span>             <span class=\"ansigreen\">return</span> self  <span class=\"ansired\"># empty RDD</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">count</span><span class=\"ansiblue\">(self)</span>\n<span class=\"ansigreen\">   1002</span>         <span class=\"ansicyan\">3</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1003</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">-&gt; 1004</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> self<span class=\"ansiyellow\">.</span>mapPartitions<span class=\"ansiyellow\">(</span><span class=\"ansigreen\">lambda</span> i<span class=\"ansiyellow\">:</span> <span class=\"ansiyellow\">[</span>sum<span class=\"ansiyellow\">(</span><span class=\"ansicyan\">1</span> <span class=\"ansigreen\">for</span> _ <span class=\"ansigreen\">in</span> i<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>sum<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1005</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">   1006</span>     <span class=\"ansigreen\">def</span> stats<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">sum</span><span class=\"ansiblue\">(self)</span>\n<span class=\"ansigreen\">    993</span>         <span class=\"ansicyan\">6.0</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    994</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">--&gt; 995</span><span class=\"ansiyellow\">         </span><span class=\"ansigreen\">return</span> self<span class=\"ansiyellow\">.</span>mapPartitions<span class=\"ansiyellow\">(</span><span class=\"ansigreen\">lambda</span> x<span class=\"ansiyellow\">:</span> <span class=\"ansiyellow\">[</span>sum<span class=\"ansiyellow\">(</span>x<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">]</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>fold<span class=\"ansiyellow\">(</span><span class=\"ansicyan\">0</span><span class=\"ansiyellow\">,</span> operator<span class=\"ansiyellow\">.</span>add<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    996</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    997</span>     <span class=\"ansigreen\">def</span> count<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">fold</span><span class=\"ansiblue\">(self, zeroValue, op)</span>\n<span class=\"ansigreen\">    867</span>         <span class=\"ansired\"># zeroValue provided to each partition is unique from the one provided</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    868</span>         <span class=\"ansired\"># to the final reduce call</span><span class=\"ansiyellow\"></span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 869</span><span class=\"ansiyellow\">         </span>vals <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>mapPartitions<span class=\"ansiyellow\">(</span>func<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">.</span>collect<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    870</span>         <span class=\"ansigreen\">return</span> reduce<span class=\"ansiyellow\">(</span>op<span class=\"ansiyellow\">,</span> vals<span class=\"ansiyellow\">,</span> zeroValue<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    871</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/rdd.pyc</span> in <span class=\"ansicyan\">collect</span><span class=\"ansiblue\">(self)</span>\n<span class=\"ansigreen\">    769</span>         &quot;&quot;&quot;\n<span class=\"ansigreen\">    770</span>         <span class=\"ansigreen\">with</span> SCCallSiteSync<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>context<span class=\"ansiyellow\">)</span> <span class=\"ansigreen\">as</span> css<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 771</span><span class=\"ansiyellow\">             </span>port <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>ctx<span class=\"ansiyellow\">.</span>_jvm<span class=\"ansiyellow\">.</span>PythonRDD<span class=\"ansiyellow\">.</span>collectAndServe<span class=\"ansiyellow\">(</span>self<span class=\"ansiyellow\">.</span>_jrdd<span class=\"ansiyellow\">.</span>rdd<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    772</span>         <span class=\"ansigreen\">return</span> list<span class=\"ansiyellow\">(</span>_load_from_socket<span class=\"ansiyellow\">(</span>port<span class=\"ansiyellow\">,</span> self<span class=\"ansiyellow\">.</span>_jrdd_deserializer<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    773</span> <span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.9-src.zip/py4j/java_gateway.py</span> in <span class=\"ansicyan\">__call__</span><span class=\"ansiblue\">(self, *args)</span>\n<span class=\"ansigreen\">    811</span>         answer <span class=\"ansiyellow\">=</span> self<span class=\"ansiyellow\">.</span>gateway_client<span class=\"ansiyellow\">.</span>send_command<span class=\"ansiyellow\">(</span>command<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    812</span>         return_value = get_return_value(\n<span class=\"ansigreen\">--&gt; 813</span><span class=\"ansiyellow\">             answer, self.gateway_client, self.target_id, self.name)\n</span><span class=\"ansigreen\">    814</span> <span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    815</span>         <span class=\"ansigreen\">for</span> temp_arg <span class=\"ansigreen\">in</span> temp_args<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/pyspark/sql/utils.pyc</span> in <span class=\"ansicyan\">deco</span><span class=\"ansiblue\">(*a, **kw)</span>\n<span class=\"ansigreen\">     43</span>     <span class=\"ansigreen\">def</span> deco<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     44</span>         <span class=\"ansigreen\">try</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">---&gt; 45</span><span class=\"ansiyellow\">             </span><span class=\"ansigreen\">return</span> f<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">*</span>a<span class=\"ansiyellow\">,</span> <span class=\"ansiyellow\">**</span>kw<span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     46</span>         <span class=\"ansigreen\">except</span> py4j<span class=\"ansiyellow\">.</span>protocol<span class=\"ansiyellow\">.</span>Py4JJavaError <span class=\"ansigreen\">as</span> e<span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">     47</span>             s <span class=\"ansiyellow\">=</span> e<span class=\"ansiyellow\">.</span>java_exception<span class=\"ansiyellow\">.</span>toString<span class=\"ansiyellow\">(</span><span class=\"ansiyellow\">)</span><span class=\"ansiyellow\"></span>\n\n<span class=\"ansigreen\">/databricks/spark/python/lib/py4j-0.9-src.zip/py4j/protocol.py</span> in <span class=\"ansicyan\">get_return_value</span><span class=\"ansiblue\">(answer, gateway_client, target_id, name)</span>\n<span class=\"ansigreen\">    306</span>                 raise Py4JJavaError(\n<span class=\"ansigreen\">    307</span>                     <span class=\"ansiblue\">&quot;An error occurred while calling {0}{1}{2}.\\n&quot;</span><span class=\"ansiyellow\">.</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">--&gt; 308</span><span class=\"ansiyellow\">                     format(target_id, &quot;.&quot;, name), value)\n</span><span class=\"ansigreen\">    309</span>             <span class=\"ansigreen\">else</span><span class=\"ansiyellow\">:</span><span class=\"ansiyellow\"></span>\n<span class=\"ansigreen\">    310</span>                 raise Py4JError(\n\n<span class=\"ansired\">Py4JJavaError</span>: An error occurred while calling z:org.apache.spark.api.python.PythonRDD.collectAndServe.\n: org.apache.spark.SparkException: Job aborted due to stage failure: Task 4 in stage 17.0 failed 1 times, most recent failure: Lost task 4.0 in stage 17.0 (TID 1218, localhost): org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 111, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 106, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 317, in func\n    return f(iterator)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1004, in &lt;lambda&gt;\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1004, in &lt;genexpr&gt;\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1987, in &lt;lambda&gt;\n    return self.map(lambda x: (f(x), x))\n  File &quot;&lt;ipython-input-9-d72b09ea76c4&gt;&quot;, line 1, in &lt;lambda&gt;\nTypeError: int() argument must be a string or a number, not &apos;Row&apos;\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:166)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.&lt;init&gt;(PythonRDD.scala:207)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:125)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:70)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:270)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:72)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:96)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:235)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\nDriver stacktrace:\n\tat org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1431)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1419)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1418)\n\tat scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59)\n\tat scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:47)\n\tat org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1418)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:799)\n\tat scala.Option.foreach(Option.scala:236)\n\tat org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:799)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1640)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1599)\n\tat org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1588)\n\tat org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48)\n\tat org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:620)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1837)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1850)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1863)\n\tat org.apache.spark.SparkContext.runJob(SparkContext.scala:1934)\n\tat org.apache.spark.rdd.RDD$$anonfun$collect$1.apply(RDD.scala:927)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:150)\n\tat org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:111)\n\tat org.apache.spark.rdd.RDD.withScope(RDD.scala:316)\n\tat org.apache.spark.rdd.RDD.collect(RDD.scala:926)\n\tat org.apache.spark.api.python.PythonRDD$.collectAndServe(PythonRDD.scala:405)\n\tat org.apache.spark.api.python.PythonRDD.collectAndServe(PythonRDD.scala)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:497)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:231)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:381)\n\tat py4j.Gateway.invoke(Gateway.java:259)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:133)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:209)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.spark.api.python.PythonException: Traceback (most recent call last):\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 111, in main\n    process()\n  File &quot;/databricks/spark/python/pyspark/worker.py&quot;, line 106, in process\n    serializer.dump_stream(func(split_index, iterator), outfile)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 2346, in pipeline_func\n    return func(split, prev_func(split, iterator))\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 317, in func\n    return f(iterator)\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1004, in &lt;lambda&gt;\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1004, in &lt;genexpr&gt;\n    return self.mapPartitions(lambda i: [sum(1 for _ in i)]).sum()\n  File &quot;/databricks/spark/python/pyspark/rdd.py&quot;, line 1987, in &lt;lambda&gt;\n    return self.map(lambda x: (f(x), x))\n  File &quot;&lt;ipython-input-9-d72b09ea76c4&gt;&quot;, line 1, in &lt;lambda&gt;\nTypeError: int() argument must be a string or a number, not &apos;Row&apos;\n\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.read(PythonRDD.scala:166)\n\tat org.apache.spark.api.python.PythonRunner$$anon$1.&lt;init&gt;(PythonRDD.scala:207)\n\tat org.apache.spark.api.python.PythonRunner.compute(PythonRDD.scala:125)\n\tat org.apache.spark.api.python.PythonRDD.compute(PythonRDD.scala:70)\n\tat org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:306)\n\tat org.apache.spark.rdd.RDD.iterator(RDD.scala:270)\n\tat org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:72)\n\tat org.apache.spark.scheduler.Task.run(Task.scala:96)\n\tat org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:235)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\t... 1 more\n\n</div>","workflows":[],"startTime":1494536819299,"submitTime":1494536819285,"finishTime":1494536819484,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"amarildolikmeta@gmail.com","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"8dd53be1-a414-4d90-9906-599639e7bbc2"}],"dashboards":[],"guid":"c02d581d-faa3-49c1-a49c-732266517aa9","globalVars":{},"iPythonMetadata":null,"inputWidgets":{}}